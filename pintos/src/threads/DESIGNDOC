
S 140      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Kishore Sridhar <kish@ccs.neu.edu>
Nirupa Narayanappa <nirupa13@ccs.neu.edu>
Sarat Chandra Sista <ssaratc@ccs.neu.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

In enum thread_status:
THREAD_SLEEPING		/* New state for sleeping threads */

Global list:
static struct list sleeping_list  /* List of processes in 
				     THREAD_SLEEPING state. */

In thread struct:

    int64_t wake_time;		/* Time after which this thread should
				   be woken up, if put to sleep */
    struct list_elem slpelem;	/* List element for sleeping_list */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep (), instead of busy-waiting until the ticks elapse, calls 
thread_sleep () which puts the thread to THREAD_SLEEPING state. All the
threads which are in THREAD_SLEEPING state are put into sleeping_list.
The sleeping_list is sorted based on the wake_time of the threads. The
wake_time of the thread is current timer_ticks () plus the ticks it
 wants to sleep. Every time schedule () is called, we check if the
wake_time for any thread in the sleeping_list is less than the 
timer_ticks (). If so, we remove it from sleeping_list and put it into
THREAD_READY state. All through the process, interrupts are disabled.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The sleeping_list is sorted in increasing order of the wake_times of each
threads. This ensures that the thread that wakes up next will always be
at the end of the list and popping it is an O(1) operation.


---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

When timer_sleep () is called simultaneously by multiple threads,
the thread which first calls and enters the thread_sleep function
will disable interrupts and then continue the execution. This makes
race conditions impossible.


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

timer_sleep () calls thread_sleep () with the number of ticks to sleep
passed as a parameter. Inside thread_sleep () the interrupts are disabled
to ensure that modifying both sleeping_list and read_list is an atomic
operation and that it cannot be interrupted.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    int original_priority;		/* Original priority given
					    to this thread */
    int priority;              		/* current (effective) priority */
    int highest_received_priority;	/* Highest priority received
					   before donation release */
    struct lock *wait_for_lock;		/* Lock this thread is waiting
					    for */
    struct list suspended_for_lock;	/* Threads blocked for
					    lock_held */
    struct list_elem blkelem;		/* list element for
					    suspended_for_lock list */

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

We have used suspended_for_lock list to store all the threads which
have been blocked waiting for the lock held by the current thread.
All these threads are probable donors. This list is sorted on priorities.

original_priority stores the original priority with which the thread is
created.

thread t calls  ---->  lock_acquire on a lock l
lock_acquire checks not NULL on ----> lock->holder, 
if true: 
        t->wait_for_lock = l;
        insert t into lock->holder->suspended_for_lock;
        donate_priority()
executes sema down -----> l->semaphore
t->wait_for_lock -----> set to NULL
lock->holder	-----> t

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

All the waiters lists in the synchronization constructs have been
modified to sorted lists. These lists are sorted in increasing order
based on the priority of the threads. So when a lock or semaphore is 
released, we pop the last element in the list which has the highest 
priority. Similary for a condition variable, the waiters list is 
sorted based on priorities.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

When a thread calls lock_acquire (lock), we check if the lock is already
held or not. if lock->holder != NULL, then we assign the lock to
current thread's wait_for_lock variable, push the thread into
lock->holder's suspended_for_lock list and then call donate_priority ().

The priority with which the thread is created is cached in
original_priority variable inside struct thread. The donated priority,
which will be the effective priority of the thread will be stored in
priority variable.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

When lock_release (lock) is called, we first check if there are any 
threads waiting for this lock in the current thread's suspended_for_lock
list. If so, then we pop the element with the highest priority and 
unblock it. The suspended_for_lock list is sorted based on the priorities
so removing an element with highest priority is an O(1) operation.

If the thread receives more donations while it's still holding the
current donation, we cache the highest received donation in the
highest_priority_received variable. When lock release is called, we
set the current thread's priority to this value and then release the
lock.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

A race is not possible in thread_set_priority () because 
thread_set_priority acts on the current running thread and hence it is
impossible to have multiple calls to thread_set_priority that act on the
same thread. Although, the priority variable in the thread structure is
susceptible to a race.  A potential race condition is when a thread t1 
tries to change its own priority while another thread t2 attempts a 
donation to t1. Hence in order to protect the priority variable from 
races, interrupts are disabled inside thread_set_priority ().

Since priority donation is a feature implemented for locks, using locks
in priority donation will lead to a circular dependency. So we cannot use
locks.
 
---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

The design we chose uses the existing code for list implementations and
attains the desired result with minimal code change. Sorting the lists
based on priorities ensures finding the highest priority thread is an
O(1) operation.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
